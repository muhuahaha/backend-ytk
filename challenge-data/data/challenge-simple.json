[
  {
    "id": 0,
    "user": { "$oid": "63d334968d736aa5b0aec699" },
    "title": "Any Prime Number in Range",
    "text": "Create a function that returns true if there's at least one prime number in the given range (n1 to n2 (inclusive)), false otherwise.",
    "url": "https://edabit.com/challenge/mLLqf6apACKBLF3Pe",
    "code": "function getVodkaBottle(obj, num) {\n  return Object.entries(obj).filter(\n    (x) => x[0].match(/(Rammstein)/g) && x[1] === num\n  )[0][0];\n}",
    "difficulty": ["Hard"],
    "tags": ["Array", "Loops", "Objects"],
    "completed": true,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675470208195" } },
    "updatedAt": { "$date": { "$numberLong": "1675501146127" } },
    "ticket": 529,
    "__v": 5,
    "bestSolution": "function primeInRange(n1, n2) {\n\treturn Array.from({ length: (n2 - n1) / 1 + 1}, (_, i) => n1 + (i * 1))\n\t\t\t\t.filter((number) => {\n\t\t\t\t\tfor (var i = 2; i <= Math.sqrt(number); i++) {\n\t\t\t\t\t\tif (number % i === 0) return false;\n\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}).length > 0\n}",
    "example": "primeInRange(10, 15) ➞ true\n// Prime numbers in range: 11, 13\n\nprimeInRange(62, 66) ➞ false\n// No prime numbers in range.\n\nprimeInRange(3, 5) ➞ true\n// Prime numbers in range: 3, 5"
  },
  {
    "id": 1,
    "user": { "$oid": "63d334968d736aa5b0aec699" },
    "title": "Burglary Series (12): Get Vodka Bottle",
    "text": "# Dies ist ein H1 #\n\n## Dies ist ein H2 ##\n\n### Dies ist ein H3 ######\n\nThe insurance guy laughs, he's just kidding. He just needs an updated list. You just need one of those Rammstein Vodka bottles.\n\nGiven an object with alcoholic drinks and a number, return a string with the name of the Rammstein bottle that matches the given number.",
    "url": "https://edabit.com/challenge/paMpZoEJ6gr4feMS3",
    "code": "function getVodkaBottle(obj, num) {\n  return Object.entries(obj).filter(\n    (x) => x[0].match(/(Rammstein)/g) && x[1] === num\n  )[0][0];\n}",
    "difficulty": ["Hard"],
    "tags": ["Array", "Loops", "Objects"],
    "completed": true,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675481035647" } },
    "updatedAt": { "$date": { "$numberLong": "1675644727696" } },
    "ticket": 533,
    "__v": 8,
    "example": "{ whiskey: 100, \"Rammstein A\": 100, \"Rammstein B\": 50 } ➞ \"Rammstein A\"\n// number = 100\n\n{ whiskey: 100, \"Rammstein A\": 100, \"Rammstein B\": 50 } ➞ \"Rammstein B\"\n// number = 50\n\n{ whiskey: 100, \"Rammstein A\": 100, \"Rammstein D\": 70, beer: 70 } ➞ \"Rammstein D\"\n// number = 70",
    "bestSolution": "const getVodkaBottle = (obj, num) =>\n  Object.keys(obj).find(key => key.includes('Rammstein') && obj[key] === num);"
  },
  {
    "id": 2,
    "user": { "$oid": "63d334968d736aa5b0aec699" },
    "title": "Calculate the Total Price of Groceries",
    "text": "Create a function that takes an array of objects (groceries) which calculates the total price and returns it as a number. A grocery object has a product, a quantity and a price, for example:",
    "url": "https://edabit.com/challenge/jRSST87NjECBzbwzL",
    "code": "function getTotalPrice(groceries) {\n  return +groceries\n    .map((x) => +(x.quantity * x.price).toFixed(2))\n    .reduce((a, b) => a + b).toFixed(2);\n}",
    "difficulty": ["Hard"],
    "tags": ["Array", "Logic", "Math", "Objects"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675487618421" } },
    "updatedAt": { "$date": { "$numberLong": "1675501746875" } },
    "ticket": 534,
    "__v": 1,
    "example": "// 1 bottle of milk:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 }\n]) ➞ 1.5\n\n// 1 bottle of milk & 1 box of cereals:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 },\n  { product: \"Cereals\", quantity: 1, price: 2.50 }\n]) ➞ 4\n\n// 3 bottles of milk:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 3, price: 1.50 }\n]) ➞ 4.5\n\n// Several groceries:\ngetTotalPrice([\n  { product: \"Milk\", quantity: 1, price: 1.50 },\n  { product: \"Eggs\", quantity: 12, price: 0.10 },\n  { product: \"Bread\", quantity: 2, price: 1.60 },\n  { product: \"Cheese\", quantity: 1, price: 4.50 }\n]) ➞ 10.4\n\n// Some cheap candy:\ngetTotalPrice([\n  { product: \"Chocolate\", quantity: 1, price: 0.10 },\n  { product: \"Lollipop\", quantity: 1, price: 0.20 }\n]) ➞ 0.3",
    "bestSolution": "function getTotalPrice(groceries) {\n\treturn Number(groceries.reduce((acc, curr) => acc += curr.price * curr.quantity, 0).toFixed(2)); \n}"
  },
  {
    "id": 3,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Frequency Distribution",
    "text": "Create a function that returns the frequency distribution of an array. This function should return an object, where the keys are the unique elements and the values are the frequency in which those elements occur.",
    "url": "https://edabit.com/challenge/uScx6aGXmNu27NYWz",
    "code": "function getFrequencies(arr) {\n  return arr.reduce((x, y) => {\n    x[y] = (x[y] || 0) + 1;\n    return x\n  }, {});\n}",
    "difficulty": ["Hard"],
    "tags": ["Language Fundamentals", "Loops", "Objects"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675488221893" } },
    "updatedAt": { "$date": { "$numberLong": "1675501207306" } },
    "ticket": 535,
    "__v": 4,
    "bestSolution": "const getFrequencies = arr =>\n  arr.reduce((map, item) => {\n    map[item] = map[item] + 1 || 1;\n    return map;\n  }, {});",
    "example": "getFrequencies([\"A\", \"B\", \"A\", \"A\", \"A\"]) ➞ { A: 4, B: 1 }\n\ngetFrequencies([1, 2, 3, 3, 2]) ➞ { \"1\": 1, \"2\": 2, \"3\": 2 }\n\ngetFrequencies([true, false, true, false, false]) ➞ { true: 2, false: 3 }\n\ngetFrequencies([]) ➞ {}"
  },
  {
    "id": 4,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Persistence",
    "text": "The additive persistence of an integer, n, is the number of times you have to replace n with the sum of its digits until n becomes a single digit integer.\n\nThe multiplicative persistence of an integer, n, is the number of times you have to replace n with the product of its digits until n becomes a single digit integer.",
    "url": "https://edabit.com/challenge/vHvu4Wis8RhmQbwXm",
    "code": "function additivePersistence(n) {\n  let sum = n;\n  let count = 0;\n  while (sum.toString().length > 1) {\n    sum = sum.toString().split('').map(x => Number(x)).reduce((a, b) => a + b);\n    count ++;\n  }\n  return count;\n}\n\n\nfunction multiplicativePersistence(n) {\n  let product = n;\n  let count = 0;\n  while (product.toString().length > 1) {\n    product = product.toString().split('').map(x => Number(x)).reduce((a, b) => a * b);\n    count ++;\n  }\n  return count;\n}",
    "difficulty": ["Very Hard"],
    "tags": ["Loops", "Math", "Numbers"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675494620452" } },
    "updatedAt": { "$date": { "$numberLong": "1675501511857" } },
    "ticket": 537,
    "__v": 0,
    "example": "additivePersistence(1679583) ➞ 3\n// 1 + 6 + 7 + 9 + 5 + 8 + 3 = 39\n// 3 + 9 = 12\n// 1 + 2 = 3\n// It takes 3 iterations to reach a single-digit number.\n\nadditivePersistence(123456) ➞ 2\n// 1 + 2 + 3 + 4 + 5 + 6 = 21\n// 2 + 1 = 3\n\nadditivePersistence(6) ➞ 0\n// Because 6 is already a single-digit integer.",
    "bestSolution": "function additivePersistence(n) {\n\tlet count=0;\n\twhile(String(n).length>1){\n\t\tn=[...String(n)].reduce((a, b)=>+a + +b);\n\t\tcount++;\n\t}\n\treturn count;\n}\n\nfunction multiplicativePersistence(n) {\n\tlet count=0;\n\twhile(String(n).length>1){\n\t\tn=[...String(n)].reduce((a, b)=>+a * +b);\n\t\tcount++;\n\t}\n\treturn count;\n}"
  },
  {
    "id": 5,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Distinct Digit in a Number",
    "text": "Write a regular expression that matches numbers whose digits are not repeated (i.e. digits are distinct).",
    "url": "https://edabit.com/challenge/3saLXYSqR2tQkszXe",
    "example": "regularExpression.test(\"123\") ➞ true\n\nregularExpression.test(\"112233\") ➞ false\n\nregularExpression.test(\"1025\") ➞ true",
    "code": "const regularExpression = /^(?:([0-9])(?!.*\\1))*$/",
    "difficulty": ["Very Hard"],
    "tags": ["Regex", "Strings", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675495025158" } },
    "updatedAt": { "$date": { "$numberLong": "1675501657870" } },
    "ticket": 540,
    "__v": 0,
    "bestSolution": "const regularExpression = /^((\\d)(?!\\d*\\2))+$/g;"
  },
  {
    "id": 6,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Highest Pair",
    "text": "You will be given a collection of five cards (representing a player's hand in poker). If your hand contains at least one pair, return an array of two elements: true and the card number of the highest pair (trivial if there only exists a single pair). Else, return false.",
    "url": "https://edabit.com/challenge/Joj2RJJ4WyxRmkfxv",
    "example": "highestPair([\"A\", \"A\", \"Q\", \"Q\", \"6\" ]) ➞ [true, \"A\"]\n\nhighestPair([\"J\", \"6\", \"3\", \"10\", \"8\"]) ➞ false\n\nhighestPair([\"K\", \"7\", \"3\", \"9\", \"3\"]) ➞ [true, \"3\"]\n\nhighestPair([\"K\", \"9\", \"10\", \"J\", \"Q\"]) ➞ false\n\nhighestPair([\"3\", \"5\", \"5\", \"5\", \"5\"]) ➞ [true, \"5\"]",
    "code": "function highestPair(cards) {\n\n  let container = [];\n\n  let regex = /(.)\\1/g;\n  let match = cards.sort().join('').match(regex);\n\n  if (match === null) {\n    return false;\n  } else if (Number(match.join(''))) {\n    match.sort().reverse();\n    container.push(true);\n    container.push(match[0][0]);\n  } else {\n    container.push(true);\n    container.push(match[0][0]);\n  }\n\n  return container;\n\n}",
    "difficulty": ["Very Hard"],
    "tags": ["Array", "Conditions", "Game", "Loops"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675495416547" } },
    "updatedAt": { "$date": { "$numberLong": "1675501948204" } },
    "ticket": 541,
    "__v": 0,
    "bestSolution": "function highestPair(cards) {\n\tlet pairs = cards\n\t.filter(v => cards.indexOf(v) != cards.lastIndexOf(v))\n\t\n\treturn pairs.length ? [true,\n\t pairs.find(v => v === 'A'||v === 'K'||v === 'Q'||v === 'J')\n\t || ''+Math.max(...pairs)] : false\n}"
  },
  {
    "id": 7,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Know Your Neighbor",
    "text": "Create a function that takes a string as an argument and returns true if each letter in the string is surrounded by a plus sign. Return false otherwise.\n\n",
    "url": "https://edabit.com/challenge/SXEBbL4xhgKJr7pqd",
    "example": "plusSign(\"+f+d+c+#+f+\") ➞ true\n\nplusSign(\"+d+=3=+s+\") ➞ true\n\nplusSign(\"f++d+g+8+\") ➞ false\n\nplusSign(\"+s+7+fg+r+8+\") ➞ false",
    "code": "function plusSign(str) {\n  let plusTest = str.split('').filter((x, i, a) => x.match(/[a-z]/gi) && a[i - 1] === '+' && a[i + 1] === '+');\n  return plusTest.length === str.match(/[a-z]/gi).length;\n}",
    "difficulty": ["Very Hard"],
    "tags": ["Conditions", "Regex", "Strings", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675495488233" } },
    "updatedAt": { "$date": { "$numberLong": "1675501908417" } },
    "ticket": 542,
    "__v": 0,
    "bestSolution": "function plusSign(str) {\n  return [...str].every((c,i)=>(/[a-z]/gi.test(c))?(str[i-1]=='+'&&str[i+1]=='+'):true)"
  },
  {
    "id": 8,
    "user": { "$oid": "63d334968d736aa5b0aec699" },
    "title": "Making a Box 2.0!",
    "text": "This is based on Helen Yu's Making a Box challenge. This challenge is the same execpt that instead of an array of strings, your function should output a matrix of characters.",
    "url": "https://edabit.com/challenge/jXJZoEXNF5jBvc7j4",
    "example": "charBox(1) ➞ [\n  [\"#\"]\n]\n\ncharBox(4) ➞ [\n  [\"#\", \"#\", \"#\", \"#\"],\n  [\"#\", \" \", \" \", \"#\"],\n  [\"#\", \" \", \" \", \"#\"],\n  [\"#\", \"#\", \"#\", \"#\"]\n]\n\ncharBox(2) ➞ [\n  [\"#\", \"#\"],\n  [\"#\", \"#\"]\n]",
    "code": "function charBox(size) {\n\tif (size === 0) {\n\t\treturn [[]];\n\t}\n\n\tif (Number.isInteger(size) && size > 0) {\n\t\treturn Array.from({ length: size }, (_, i) =>\n\t\t\ti === 0 || i === size - 1\n\t\t\t\t? '#'.repeat(size).split('')\n\t\t\t\t: `#${' '.repeat(size - 2)}#`.split('')\n\t\t);\n\t}\n\treturn -1;\n}",
    "difficulty": ["Very Hard"],
    "tags": ["Formatting", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675495541527" } },
    "updatedAt": { "$date": { "$numberLong": "1675498024798" } },
    "ticket": 543,
    "__v": 0,
    "bestSolution": "const charBox = size => {\n\tif (!Number.isInteger(size) || (size < 0)) return -1;\n\n\tconst outer = Array(size).fill('#');\n\tif (size < 3) return Array(size || 1).fill(outer);\n\n\tconst inner = ['#', ...Array(size - 2).fill(' '), '#'];\n\treturn [outer, ...Array(size - 2).fill(inner), outer];\n};"
  },
  {
    "id": 9,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Checkerboard Pattern",
    "text": "Create a function that returns true if the two-dimensional n x n input array has a checker-board pattern.",
    "url": "https://edabit.com/challenge/qNTiqHJ6cDi6Tccny",
    "example": "isCheckerboard([\n  [1, 1],\n  [0, 1]\n]) ➞ false\n\nisCheckerboard([\n  [0, 1],\n  [1, 0]\n]) ➞ true\n\nisCheckerboard([\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 1, 1]\n]) ➞ false\n\nisCheckerboard([\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1],\n  [0, 1, 0, 1, 0],\n  [1, 0, 1, 0, 1]\n]) ➞ true",
    "code": "function isCheckerboard(arr) {\n  let col = [];\n  for (let i = 0; i < arr[0].length; i++) {\n    col[i] = new Array(arr.length).fill();\n\n    for (let j = 0; j < arr.length; j++) {\n      col[i][j] = arr[j][i];\n    }\n  }\n\n  let rowMuster = arr.some(x => x.join('').match(/(.)\\1/g));\n  let colMuster = col.some(x => x.join('').match(/(.)\\1/g));\n  \n  return !rowMuster || !colMuster;\n}",
    "bestSolution": "function isCheckerboard(arr) {\n\tlet zigzag = [];\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tzigzag = zigzag.concat(i % 2 ? arr[i].reverse() : arr[i]);\n\t}\n\treturn zigzag.every((z, i) => z !== zigzag[i+1]);\n}",
    "difficulty": ["Hard"],
    "tags": ["Array", "Game", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675564163904" } },
    "updatedAt": { "$date": { "$numberLong": "1675564163904" } },
    "ticket": 612,
    "__v": 0
  },
  {
    "id": 10,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Decompose Address",
    "text": "Create a function that decomposes an address string into an array of five substrings:\n\nStreet Number\nStreet Name\nCity Name\nState\nZip Code\n",
    "url": "https://edabit.com/challenge/xAc7G3AzGgQzLabTe",
    "example": "decomposeAddress(\"557 Farmer Rd Corner, MT 59105\")\n➞ [\"557\", \"Farmer Rd\", \"Corner\", \"MT\", \"59105\"]\n\ndecomposeAddress(\"3315 Vanity St Beverly Hills, CA 90210\")\n➞ [\"3315\", \"Vanity St\", \"Beverly Hills\", \"CA\", \"90210\"]\n\ndecomposeAddress(\"8919 Scarecrow Ct Idaho Falls, ID 80193\")\n➞ [\"8919\", \"Scarecrow Ct\", \"Idaho Falls\", \"ID\", \"80193\"]",
    "code": "function decomposeAddress(str) {\n\n  let streetNumber = str.match(/^\\d*/g);\n  let streetName = str.match(/\\b[A-Z]*\\s\\b([A-Z][a-z])\\b/gi);\n  let cityName = str.match(/(([A-Z][a-z]){1}\\s)(.)*(?=,)/g)[0].split(' ').filter((x,i) => i > 0 ? x:false).join(' ');\n  let state = str.match(/[A-Z]{2}/g);\n  let zipCode = str.match(/\\d{5}$/g);\n\n  let arr = [streetNumber, streetName, cityName, state, zipCode];\n  return [].concat(...arr);\n\n}",
    "bestSolution": "const decomposeAddress = str =>\n  str.match(/(\\d+) (.+ \\w{2}) (.+), (\\w{2}) (\\d+)/).slice(1);",
    "difficulty": ["Very Hard"],
    "tags": ["Regex", "Strings"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675500346461" } },
    "updatedAt": { "$date": { "$numberLong": "1675500346461" } },
    "ticket": 568,
    "__v": 0
  },
  {
    "id": 11,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Powerful Numbers",
    "text": "Given a positive number x:\n\np = (p1, p2, …)\n// Set of *prime* factors of x\n\nIf the square of every item in p is also a factor of x, then x is said to be a powerful number.\n\nCreate a function that takes a number and returns true if it's powerful, false if it's not.",
    "url": "https://edabit.com/challenge/qBHiycz67g7BrM9h5",
    "example": "isPowerful(36) ➞ true\n// p = (2, 3) (prime factors of 36)\n// 2^2 = 4 (factor of 36)\n// 3^2 = 9 (factor of 36)\n\nisPowerful(27) ➞ true\n\nisPowerful(674) ➞ false",
    "code": "function isPowerful(num) {\n\n  let num1 = num;\n  let factors = [];\n\n  for (let i = 2; i <= num1; i++) {\n    while ((num1 % i) === 0) {\n      factors.push(i);\n      num1 /= i;\n    }\n  }\n\n  return Array.from(new Set(factors)).every(x => num % (x * x) === 0);\n\n}",
    "bestSolution": "console.log('oh yeah, got pole position')\n\n// cvf 354,962 XP solution\nfunction isPrime(num) {\n\tfor (let i = 3; i <= Math.sqrt(num); i++) {\n\t\tif (num % i === 0) return false;\n\t}\n\treturn true;\n}\n\nfunction isPowerful(num) {\n\tlet primeFactors = [];\n\tif (num % 2 === 0) primeFactors.push(2);\n\tfor (let i = 3; i <= num; i+= 2) {\n\t\tif (num % i === 0 && isPrime(i)) primeFactors.push(i);\n\t}\n\n\treturn primeFactors.every(p => num % (p*p) === 0);\n}",
    "difficulty": ["Very Hard"],
    "tags": ["Conditions", "Math", "Numbers", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675500599105" } },
    "updatedAt": { "$date": { "$numberLong": "1675500659684" } },
    "ticket": 569,
    "__v": 0
  },
  {
    "id": 12,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Pizza Points™ 🍕",
    "text": "Google is launching a network of autonomous pizza delivery drones and wants you to create a flexible rewards system (Pizza Points™) that can be tweaked in the future. The rules are simple: if a customer has made at least N orders of at least Y price, they get a FREE pizza!\n\nCreate a function that takes an object of customers, a minimum number of orders and a minimum order price. Return an array of customers that are eligible for a free pizza.",
    "url": "https://edabit.com/challenge/raWPf5nZyRKEEH6ZQ",
    "example": " let customersObj = {\n    \"Batman\": [22, 30, 11, 17, 15, 52, 27, 12],\n    \"Spider-Man\": [5, 17, 30, 33, 40, 22, 26, 10, 11, 45]\n  }\n\n  pizzaPoints(customersObj, 5, 20) ➞ [\"Spider-Man\"]\n\n  pizzaPoints(customersObj, 3, 10) ➞ [\"Batman\", \"Spider-Man\"]\n\n  pizzaPoints(customersObj, 5, 100) ➞ []",
    "code": "function pizzaPoints(customers, minOrders, minPrice) {\n    let result = [];\n\n    for (let key in customers) {\n        customers[key].filter(x => x >= minPrice).length >= minOrders ? result.push(key) : false;\n    }\n\n    return result.sort();\n\n}",
    "bestSolution": "function pizzaPoints(customers, minOrders, minPrice) {\n\treturn Object.keys(customers).filter(k => customers[k].filter(v => v >= minPrice).length >= minOrders).sort()\n}\n\nconst pizzaPoints = (customers, minOrders, minPrice) => {\n const values = Object.values(customers)\n .map(a => a.filter(b => b >= minPrice).length >= minOrders);\n\n  return Object.keys(customers).filter((_, i) => values[i]).sort();\n}",
    "difficulty": ["Hard"],
    "tags": ["Game", "Objects"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675744855061" } },
    "updatedAt": { "$date": { "$numberLong": "1675744855061" } },
    "ticket": 791,
    "__v": 0
  },
  {
    "id": 13,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Algorithms: Binary Search",
    "text": "Create a function that finds a target number in a list of prime numbers. Implement a binary search algorithm in your function. The target number will be from 2 through 97. If the target is prime then return \"yes\" else return \"no\".",
    "url": "https://edabit.com/challenge/5puuiuvW48dEsjkzW",
    "example": "var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\nisPrime(primes, 3) ➞ \"yes\"\n\nisPrime(primes, 4) ➞ \"no\"\n\nisPrime(primes, 67) ➞ \"yes\"\n\nisPrime(primes, 36) ➞ \"no\"",
    "code": "const isPrime = (primes, num) => {\n let min = 0;\n let max = primes.length - 1;           \n while (min <= max) { \n  let middleNum = Math.floor((min + max) / 2);   \n     if (primes[middleNum] === num) return 'yes'; \n     else if (primes[middleNum] < num)  \n          min = middleNum + 1; \n     else\n          max = middleNum - 1; \n }   \n return 'no'; \n}",
    "bestSolution": "function isPrime(primes, num) {\n\tif(primes.length === 1) return primes[0] === num ? \"yes\" : \"no\";\n\tlet mid = Math.floor(primes.length / 2),\n\t\t\tleft = primes.slice(0, mid),\n\t\t\tright = primes.slice(mid);\n\tprimes = right[0] > num ? left : right;\n\treturn isPrime(primes, num);\n}",
    "difficulty": ["Hard"],
    "tags": ["Algorithms", "Interview", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675565130933" } },
    "updatedAt": { "$date": { "$numberLong": "1675565130933" } },
    "ticket": 624,
    "__v": 0
  },
  {
    "id": 14,
    "user": { "$oid": "63b47a4a9ec15024abe41d01" },
    "title": "Break Point",
    "text": "A number has a breakpoint if it can be split in a way where the digits on the left side and the digits on the right side sum to the same number.\n\nFor instance, the number 35190 can be sliced between the digits 351 and 90, since 3 + 5 + 1 = 9 and 9 + 0 = 9. On the other hand, the number 555 does not have a breakpoint (you must split between digits).\n\nCreate a function that returns true if a number has a breakpoint, and false otherwise.",
    "url": "https://edabit.com/challenge/eoFDKdjN9tFXWcEQi",
    "example": "breakPoint(159780) ➞ true\n\nbreakPoint(112) ➞ true\n\nbreakPoint(1034) ➞ true\n\nbreakPoint(10) ➞ false\n\nbreakPoint(343) ➞ false",
    "code": "function breakPoint(num) {\n  let container = [];\n  let container1 = [];\n  let str = num.toString();\n  \n  for (let i = 1; i < str.length; i++) {\n    container.push(str.slice(0, i));\n    container1.push(str.slice(i));\n  }\n\n  let arr1 = container.map(x => x.split('').map(x => Number(x)).reduce((a, b) => a + b));\n  let arr2 = container1.map(x => x.split('').map(x => Number(x)).reduce((a, b) => a + b))\n\n  let sum = arr1.map(function (num, i) {\n    return num - arr2[i];\n  });\n\n  return sum.some(x => x === 0);\n\n}",
    "bestSolution": "function breakPoint(num) {\n\tlet arr = `${num}`.split('')\n\tfor(let i = 1; i<arr.length; i++){\n\t\tlet firstSum = arr.slice(0,i).reduce((pv,cv)=> (+pv) + (+cv))\n\t\tlet secondSum = arr.slice(i).reduce((pv,cv)=> (+pv) + (+cv))\n\t\tif(firstSum == secondSum) return true\n\t}\n\treturn false\n}",
    "difficulty": ["Hard"],
    "tags": ["Array", "Loops", "Validation"],
    "completed": false,
    "status": "new",
    "createdAt": { "$date": { "$numberLong": "1675562904512" } },
    "updatedAt": { "$date": { "$numberLong": "1675562904512" } },
    "ticket": 594,
    "__v": 0
  }
]
